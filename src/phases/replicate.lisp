(in-package #:cl-zfs-backup.phases)

(defgeneric replicate (object))

(defgeneric replicate-by-mode (mode destructive? target-filesystem))

(defun make-replication-command (mode destructive? target-filesystem)
  (let* ((endpoint (ds:endpoint target-filesystem))
         (source-filesystem (ds:source-filesystem target-filesystem))
         (source-filesystem-name (ds:name source-filesystem))
         (recent-snapshot-suffix (ds:suffix (ds:recent-snapshot source-filesystem)))
         (common-snapshot (ds:common-snapshot target-filesystem))
         (remote-command `("zfs recv -u"
                           ,@(when (or (ds:exists? target-filesystem)
                                       (and (eq mode :incremental) destructive?))
                               '("-F"))
                           ,(ds:name target-filesystem))))
    `("zfs send -ec"
      ,@(when common-snapshot
          `(,(format nil "-I ~a@~a" source-filesystem-name (ds:suffix common-snapshot))))
      ,(format nil "~a@~a" source-filesystem-name recent-snapshot-suffix)
      "|"
      ,@(cmd:make-remote-prefix (ep:user endpoint) (ep:port endpoint) (ep:address endpoint))
      ,@remote-command)))

(defun replicate-with-cleanup (target-filesystem command)
  (let* ((target (ds:endpoint target-filesystem))
         (source-filesystem (ds:source-filesystem target-filesystem))
         (source (ds:endpoint source-filesystem))
         (success? nil))
    (unwind-protect (progn (cmd:run source nil command) (setf success? t))
      (unless success?
        (r:log (:warn :replicate :cleanup-begin))
        (unhold (ds:recent-snapshot source-filesystem) (ep:hostname target))
        (r:log (:warn :replicate :cleanup-end))))))

(defun update-holds (target-filesystem &key force)
  (flet ((update (filesystem hostname)
           (let ((recent-snapshot (ds:recent-snapshot filesystem))
                 (holds (u:href (ds:holds filesystem) hostname)))
             (dolist (snapshot holds)
               (unless (and (null force) (eq snapshot recent-snapshot))
                 (unhold snapshot hostname))))))
    (let ((source-filesystem (ds:source-filesystem target-filesystem)))
      (update source-filesystem (ep:hostname (ds:endpoint target-filesystem)))
      (update target-filesystem (ep:hostname (ds:endpoint source-filesystem))))))

(defun hold (snapshot hostname)
  (let ((endpoint (ds:endpoint snapshot))
        (snapshot-holds (ds:holds snapshot))
        (name (ds:name snapshot))
        (tag (format nil "~a~a" ds:+prefix+ hostname)))
    (unless (u:href snapshot-holds tag)
      (cmd:! (endpoint) "zfs hold" tag name)
      (setf (u:href snapshot-holds tag) t)
      (push snapshot (u:href (ds:holds (ds:filesystem snapshot)) hostname))
      (r:log (:debug :replicate :hold) tag name (ep:hostname endpoint)))))

(defun unhold (snapshot hostname)
  (let ((endpoint (ds:endpoint snapshot))
        (snapshot-holds (ds:holds snapshot))
        (name (ds:name snapshot))
        (tag (format nil "~a~a" ds:+prefix+ hostname)))
    (when (u:href snapshot-holds tag)
      (cmd:! (endpoint) "zfs release" tag name)
      (remhash tag snapshot-holds)
      (remove snapshot (u:href (ds:holds (ds:filesystem snapshot)) hostname))
      (r:log (:debug :replicate :unhold) tag name (ep:hostname endpoint)))))

(defmethod replicate-by-mode :around (mode destructive? (target-filesystem ds:target-filesystem))
  (let ((endpoint (ds:endpoint target-filesystem))
        (source-filesystem-name (ds:name (ds:source-filesystem target-filesystem))))
    (r:log (:debug :replicate :attempt)
      mode (when destructive? :destructive) source-filesystem-name (ep:hostname endpoint))
    (if (or (null destructive?)
            (and destructive? (ep:destructive? endpoint)))
        (call-next-method)
        (r:log (:warn :replicate :destructive-failed) source-filesystem-name (ep:name endpoint)))))

(defmethod replicate-by-mode :before (mode destructive? (target-filesystem ds:target-filesystem))
  (let* ((endpoint (ds:endpoint target-filesystem))
         (hostname (ep:hostname endpoint)))
    (loop :for parent := (ds:parent target-filesystem) :then (ds:parent parent)
          :while (and parent (ds:parent parent))
          :unless (ds:exists? parent)
            :do (let ((parent-name (ds:name parent)))
                  (cmd:! (endpoint) "zfs create -u -o canmount=noauto" parent-name)
                  (r:log (:debug :replicate :filesystem-created) parent-name hostname)))
    (r:log (:info :replicate :begin) (ds:name (ds:source-filesystem target-filesystem)) hostname)))

(defmethod replicate-by-mode :after (mode destructive? (target-filesystem ds:target-filesystem))
  (let ((source-filesystem-name (ds:name (ds:source-filesystem target-filesystem)))
        (hostname (ep:hostname (ds:endpoint target-filesystem))))
    (r:log (:debug :replicate :end)
      mode (when destructive? :destructive) source-filesystem-name hostname)))

(defmethod replicate-by-mode :before (mode
                                      (destructive? (eql t))
                                      (target-filesystem ds:target-filesystem))
  (update-holds target-filesystem :force t))

(defmethod replicate-by-mode :before ((mode (eql :full))
                                      (destructive? (eql t))
                                      (target-filesystem ds:target-filesystem))
  (let ((endpoint (ds:endpoint target-filesystem)))
    (update-holds target-filesystem :force t)
    (cmd:? (endpoint) "zfs destroy" (format nil "~a@%" (ds:name target-filesystem)))))

(defmethod replicate-by-mode :around ((mode (eql :incremental))
                                      (destructive? (eql nil))
                                      (target-filesystem ds:target-filesystem))
  (let* ((source-filesystem (ds:source-filesystem target-filesystem))
         (recent-source-suffix (ds:suffix (ds:recent-snapshot source-filesystem)))
         (common-target-suffix (ds:suffix (ds:common-snapshot target-filesystem))))
    (if (string= recent-source-suffix common-target-suffix)
        (r:log (:debug :replicate :incremental-skipped) (ds:name source-filesystem))
        (handler-case (call-next-method)
          (uiop/run-program:subprocess-error ()
            (let ((target-filesystem-name (ds:name target-filesystem))
                  (source-filesystem-name (ds:name source-filesystem)))
              (r:log (:warn :replicate :incremental-failed)
                source-filesystem-name target-filesystem-name)
              (replicate-by-mode mode t target-filesystem)))))))

(defmethod replicate-by-mode (mode destructive? (target-filesystem ds:target-filesystem))
  (let ((endpoint (ds:endpoint target-filesystem))
        (source-filesystem (ds:source-filesystem target-filesystem))
        (command (make-replication-command mode destructive? target-filesystem)))
    (u:when-let ((recent-source-snapshot (ds:recent-snapshot source-filesystem)))
      (hold recent-source-snapshot (ep:hostname endpoint)))
    (unwind-protect (replicate-with-cleanup target-filesystem command)
      (ds:update-container target-filesystem)
      (hold (ds:recent-snapshot target-filesystem) (ep:hostname (ep:source endpoint)))
      (update-holds target-filesystem))))

(defmethod replicate ((object ep:target))
  (u:do-hash-values (filesystem (ds:datasets object))
    (let ((recent (ds:recent-snapshot filesystem))
          (common (ds:common-snapshot filesystem)))
      (cond
        ((null recent)
         (replicate-by-mode :full nil filesystem))
        ((null common)
         (replicate-by-mode :full t filesystem))
        ((string= (ds:suffix common) (ds:suffix recent))
         (replicate-by-mode :incremental nil filesystem))
        (t
         (replicate-by-mode :incremental t filesystem))))))

(defmethod replicate ((object ep:source))
  (dolist (target (ep:targets object))
    (replicate target)))

(defmethod replicate ((object list))
  (r:log (:info :replicate :phase-begin))
  (dolist (source object)
    (replicate source))
  (r:log (:info :replicate :phase-end)))
